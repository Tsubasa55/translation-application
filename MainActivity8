package com.websarva.wings.android.talksample2;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import android.app.Activity;
import android.app.Application;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.os.Bundle;
import android.os.Vibrator;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.Locale;

public class MainActivity8 extends AppCompatActivity implements View.OnLongClickListener, TextToSpeech.OnInitListener {

    private TextView textView;

    private int lang;

    private Vibrator vibrator;

    TextToSpeech tts;

    String contents = "読み上げたい内容";

    private boolean hasSpoken =false;


    ActivityResultLauncher<Intent> resultLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                if (result.getResultCode() == Activity.RESULT_OK) {
                    Intent resultData = result.getData();
                    if (resultData != null) {
                        ArrayList candidates =
                                resultData.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);

                        if (candidates.size() > 0) {
                            textView.setText(candidates.get(0).toString());
                        }
                    }
                }
            });

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main8);

        findViewById(R.id.button_start).setOnLongClickListener(this);

        vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);

        tts = new TextToSpeech(this, this);

        if(!hasSpoken) {
            speechText();
            hasSpoken = true;
        }

        lang = 0;

        textView = findViewById(R.id.text_view);

        Button buttonStart = findViewById(R.id.button_start);
        buttonStart.setOnClickListener(v -> {
            speech();

        });
    }

    private void speech() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);

        if (lang == 0) {
            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.JAPAN.toString());
        } else if (lang == 1) {
            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.ENGLISH.toString());
        } else if (lang == 2) {
            intent.putExtra(RecognizerIntent.EXTRA_PREFER_OFFLINE, true);
        } else {
            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                    RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        }

        intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 100);
        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, "音声を入力");

        try {
            resultLauncher.launch(intent);
        } catch (ActivityNotFoundException e) {
            e.printStackTrace();
            textView.setText(R.string.error);
        }
    }

    public class AppControl extends Application {
        @Override
        public void onCreate() {
            super.onCreate();
            speechText();
        }
    }

    @Override
    public void onInit(int status) {
        if (TextToSpeech.SUCCESS == status) {
            Locale locale = Locale.JAPAN;
            if (tts.isLanguageAvailable(locale) >= TextToSpeech.LANG_AVAILABLE) {
                tts.setLanguage(locale);
                speechText();
            } else {
                Log.d("Error", "Locale");
            }
        } else {
            Log.d("Error", "Init");
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (null != tts) {
            tts.shutdown();
        }
    }

    private void speechText() {
        if (0 < contents.length()) {
            if (tts.isSpeaking()) {
                tts.stop();
            }
            System.out.println(contents);
            tts.speak("音声入力画面に移動しました。画面をタップすることで録音を行うことができます。また、画面を長押しすることでホーム画面に戻ることができます。バイブレーションの動作によってホーム画面に移動したことをお知らせします。", TextToSpeech.QUEUE_FLUSH, null);
        }
    }

    public boolean onLongClick(View v){

        tts.stop();

        if (vibrator.hasVibrator()) {
            vibrator.vibrate(10000);
        }

        Intent intent = new Intent(this, MainActivity.class);

        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent);
        }
        return  true;
    }

    @Override
    protected void onStop() {
        super.onStop();
        vibrator.cancel();
    }

}
